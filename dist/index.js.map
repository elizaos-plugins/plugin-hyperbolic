{"version":3,"sources":["../src/index.ts","../src/environment.ts","../src/actions/actionGetAvailableGpus.ts","../src/error/base.ts","../src/actions/actionGetCurrentBalance.ts","../src/actions/actionGetGpuStatus.ts","../src/actions/actionGetSpendHistory.ts","../src/actions/actionRentCompute.ts","../src/utils/parseGpuRent.ts","../src/actions/actionTerminateCompute.ts","../src/utils/parseGpuInstance.ts"],"sourcesContent":["import { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport { getConfig } from \"./environment\";\nimport { actionGetAvailableGpus } from \"./actions/actionGetAvailableGpus\";\nimport { actionGetCurrentBalance } from \"./actions/actionGetCurrentBalance\";\nimport { actionGetGpuStatus } from \"./actions/actionGetGpuStatus\";\nimport { actionGetSpendHistory } from \"./actions/actionGetSpendHistory\";\nimport { actionRentCompute } from \"./actions/actionRentCompute\";\nimport { actionTerminateCompute } from \"./actions/actionTerminateCompute\";\n\n\n// Start the loader\nconst spinner = ora({\n    text: chalk.cyan('Initializing HYPERBOLIC Plugin...'),\n    spinner: 'dots12',\n    color: 'cyan'\n  }).start();\n\nconst actions = [\n    actionGetAvailableGpus,\n    actionGetCurrentBalance,\n    actionGetGpuStatus,\n    actionGetSpendHistory,\n    actionRentCompute,\n    actionTerminateCompute\n];\n\n// Get NVIDIA_NIM_SPASH from config\nconst HYPERBOLIC_SPASH = getConfig().HYPERBOLIC_SPASH;\n\n// Initial banner\n// Only show splash screen if NVIDIA_NIM_SPASH is true\nif (HYPERBOLIC_SPASH) {\n    // Initial banner with chalk styling\n    console.log(`\\n${chalk.cyan('┌────────────────────────────────────────┐')}`);\n    console.log(chalk.cyan('│') + chalk.yellow.bold('          HYPERBOLIC PLUGIN             ') + chalk.cyan(' │'));\n    console.log(chalk.cyan('├────────────────────────────────────────┤'));\n    console.log(chalk.cyan('│') + chalk.white('  Initializing HYPERBOLIC Services...    ') + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\n    console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n    // Stop the loader\n    spinner.succeed(chalk.green('HYPERBOLIC Plugin initialized successfully!'));\n\n    // Create a beautiful table for actions\n    const actionTable = new Table({\n      head: [\n        chalk.cyan('Action'),\n        chalk.cyan('H'),\n        chalk.cyan('V'),\n        chalk.cyan('E'),\n        chalk.cyan('Similes')\n      ],\n      style: {\n        head: [],\n        border: ['cyan']\n      }\n    });\n\n    // Format and add action information\n    for (const action of actions) {\n        actionTable.push([\n            chalk.white(action.name),\n            typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n            chalk.gray(action.similes?.join(', ') || 'none')\n        ]);\n    }\n\n    // Display the action table\n    console.log(`\\n${actionTable.toString()}`);\n\n    // Plugin status with a nice table\n    const statusTable = new Table({\n      style: {\n        border: ['cyan']\n      }\n    });\n\n    statusTable.push(\n      [chalk.cyan('Plugin Status')],\n      [chalk.white('Name    : ') + chalk.yellow('hyperbolic-plugin')],\n      [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n      [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n    );\n\n    console.log(`\\n${statusTable.toString()}\\n`);\n  } else {\n    // Stop the loader silently if splash is disabled\n    spinner.stop();\n  }\n\n  const hyperbolicPlugin: Plugin = {\n    name: \"hyperbolic-plugin\",\n    description: \"HYPERBOLIC Plugin for DePin\",\n    actions: actions,\n    evaluators: []\n  };\n\nexport { hyperbolicPlugin };\nexport default hyperbolicPlugin;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Environment Variables\nlet ENV= \"production\";\n\n// Hyperbolic API Configuration\nexport const HYPERBOLIC_ENDPOINTS = {\n    production: {\n        marketplace: \"https://api.hyperbolic.xyz/v1/marketplace\",\n        balance: \"https://api.hyperbolic.xyz/billing/get_current_balance\",\n        history: \"https://api.hyperbolic.xyz/billing/purchase_history\",\n        instances: {\n            base: \"https://api.hyperbolic.xyz/v1/marketplace/instances\",\n            history: \"https://api.hyperbolic.xyz/v1/marketplace/instances/history\",\n            create: \"https://api.hyperbolic.xyz/v1/marketplace/instances/create\",\n            terminate: \"https://api.hyperbolic.xyz/v1/marketplace/instances/terminate\",\n            gpu_status: \"https://api.hyperbolic.xyz/v1/marketplace/instances/{id}/status\"\n        }\n    },\n    staging: {\n        marketplace: process.env.HYPERBOLIC_STAGING_MARKETPLACE || \"https://api-staging.hyperbolic.xyz/v1/marketplace\",\n        balance: process.env.HYPERBOLIC_STAGING_BALANCE || \"https://api-staging.hyperbolic.xyz/billing/get_current_balance\",\n        history: process.env.HYPERBOLIC_STAGING_HISTORY || \"https://api-staging.hyperbolic.xyz/billing/purchase_history\",\n        instances: {\n            base: process.env.HYPERBOLIC_STAGING_INSTANCES || \"https://api-staging.hyperbolic.xyz/v1/marketplace/instances\",\n            history: process.env.HYPERBOLIC_STAGING_INSTANCES_HISTORY || \"https://api-staging.hyperbolic.xyz/v1/marketplace/instances/history\",\n            create: process.env.HYPERBOLIC_STAGING_INSTANCES_CREATE || \"https://api-staging.hyperbolic.xyz/v1/marketplace/instances/create\",\n            terminate: process.env.HYPERBOLIC_STAGING_INSTANCES_TERMINATE || \"https://api-staging.hyperbolic.xyz/v1/marketplace/instances/terminate\",\n            gpu_status: \"https://api.hyperbolic.xyz/v1/marketplace/instances/{id}/status\"\n        }\n    }\n} as const;\n\nexport const hyperbolicEnvSchema = z.object({\n    // API Configuration\n    HYPERBOLIC_ENV: z.enum([\"production\", \"staging\"]).default(\"production\"),\n    HYPERBOLIC_API_KEY: z.string().min(1, \"HYPERBOLIC_API_KEY is required\"),\n\n    // Request Configuration\n    HYPERBOLIC_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\n    HYPERBOLIC_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\n    HYPERBOLIC_TIMEOUT: z.string().transform(Number).default(\"5000\"),\n\n    // Logging Configuration\n    HYPERBOLIC_GRANULAR_LOG: z.boolean().default(true),\n    HYPERBOLIC_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\n\n    // SSH Configuration\n    HYPERBOLIC_SSH_PRIVATE_KEY_PATH: z.string().optional(),\n\n    // Runtime Configuration\n    HYPERBOLIC_RUNTIME_CHECK_MODE: z.boolean().default(false),\n    HYPERBOLIC_SPASH: z.boolean().default(false)\n});\n\nexport type HyperbolicConfig = z.infer<typeof hyperbolicEnvSchema>;\n\nexport function getConfig(\n    env: string | undefined | null = ENV ||\n        process.env.HYPERBOLIC_ENV\n): HyperbolicConfig {\n    ENV = env || \"production\";\n\n    return {\n        HYPERBOLIC_ENV: (env as \"production\" | \"staging\") || \"production\",\n        HYPERBOLIC_API_KEY: process.env.HYPERBOLIC_API_KEY || \"\",\n        HYPERBOLIC_MAX_RETRIES: Number(process.env.HYPERBOLIC_MAX_RETRIES || \"3\"),\n        HYPERBOLIC_RETRY_DELAY: Number(process.env.HYPERBOLIC_RETRY_DELAY || \"1000\"),\n        HYPERBOLIC_TIMEOUT: Number(process.env.HYPERBOLIC_TIMEOUT || \"5000\"),\n        HYPERBOLIC_GRANULAR_LOG: process.env.HYPERBOLIC_GRANULAR_LOG === \"true\" || false,\n        HYPERBOLIC_LOG_LEVEL: (process.env.HYPERBOLIC_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\n        HYPERBOLIC_SSH_PRIVATE_KEY_PATH: process.env.SSH_PRIVATE_KEY_PATH,\n        HYPERBOLIC_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n        HYPERBOLIC_SPASH: process.env.HYPERBOLIC_SPASH === \"true\" || false\n    };\n}\n\nexport async function validateHyperbolicConfig(\n    runtime: IAgentRuntime\n): Promise<HyperbolicConfig> {\n    try {\n        const envConfig = getConfig(\n            runtime.getSetting(\"HYPERBOLIC_ENV\") ?? undefined\n        );\n\n        const config = {\n            HYPERBOLIC_ENV: process.env.HYPERBOLIC_ENV || runtime.getSetting(\"HYPERBOLIC_ENV\") || envConfig.HYPERBOLIC_ENV,\n            HYPERBOLIC_API_KEY: process.env.HYPERBOLIC_API_KEY || runtime.getSetting(\"HYPERBOLIC_API_KEY\") || envConfig.HYPERBOLIC_API_KEY,\n            HYPERBOLIC_MAX_RETRIES: process.env.HYPERBOLIC_MAX_RETRIES || runtime.getSetting(\"HYPERBOLIC_MAX_RETRIES\") || envConfig.HYPERBOLIC_MAX_RETRIES.toString(),\n            HYPERBOLIC_RETRY_DELAY: process.env.HYPERBOLIC_RETRY_DELAY || runtime.getSetting(\"HYPERBOLIC_RETRY_DELAY\") || envConfig.HYPERBOLIC_RETRY_DELAY.toString(),\n            HYPERBOLIC_TIMEOUT: process.env.HYPERBOLIC_TIMEOUT || runtime.getSetting(\"HYPERBOLIC_TIMEOUT\") || envConfig.HYPERBOLIC_TIMEOUT.toString(),\n            HYPERBOLIC_GRANULAR_LOG: process.env.HYPERBOLIC_GRANULAR_LOG === \"true\" || false,\n            HYPERBOLIC_LOG_LEVEL: process.env.HYPERBOLIC_LOG_LEVEL || runtime.getSetting(\"HYPERBOLIC_LOG_LEVEL\") || envConfig.HYPERBOLIC_LOG_LEVEL,\n            HYPERBOLIC_SSH_PRIVATE_KEY_PATH: process.env.SSH_PRIVATE_KEY_PATH || runtime.getSetting(\"SSH_PRIVATE_KEY_PATH\"),\n            HYPERBOLIC_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n            HYPERBOLIC_SPASH: process.env.HYPERBOLIC_SPASH === \"true\" || false\n        };\n\n        return hyperbolicEnvSchema.parse(config);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error(`Failed to validate Hyperbolic configuration: ${errorMessage}`);\n    }\n}\n\n// Export endpoints configuration\nexport const getEndpoints = (env: string = ENV) =>\n    HYPERBOLIC_ENDPOINTS[env as keyof typeof HYPERBOLIC_ENDPOINTS];\n\n// Helper to get full endpoint URL\nexport function getEndpointUrl(endpoint: string, env: string = ENV): string {\n    const endpoints = getEndpoints(env);\n    const parts = endpoint.split('.');\n    let current: Record<string, unknown> = endpoints;\n\n    for (const part of parts) {\n        if (current[part] === undefined) {\n            throw new Error(`Invalid endpoint path: ${endpoint}`);\n        }\n        current = current[part] as Record<string, unknown>;\n    }\n\n    if (typeof current !== 'string') {\n        throw new Error(`Invalid endpoint path: ${endpoint}`);\n    }\n\n    return current;\n}","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[GetAvailableGpus] ${message}`, data);\n        console.log(`[GetAvailableGpus] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetAvailableGpusContent extends Content {\n    text: string;\n    filters?: Record<string, unknown>;\n    success?: boolean;\n    data?: {\n        gpus: Array<{\n            model: string;\n            memory: number;\n            price: number;\n            available: number;\n            total: number;\n            location: string;\n            node_id: string;\n            cluster_name: string;\n            compute_power: number;\n            clock_speed: number;\n            storage_capacity: number;\n            ram_capacity: number;\n            cpu_cores: number;\n            status: string;\n        }>;\n        error?: string;\n    };\n}\n\n// interface GpuInfo {\n//     model: string;\n//     memory: number;\n//     compute_capability: string;\n//     price_per_hour: number;\n//     price_per_month: number;\n//     availability: boolean;\n//     location: string;\n//     performance_score: number;\n// }\n\nexport const actionGetAvailableGpus: Action = {\n    name: \"GET_HB_AVAILABLE_GPUS\",\n    similes: [\"LIST_GPUS\", \"SHOW_GPUS\", \"AVAILABLE_GPUS\", \"FIND_GPUS\"],\n    description: \"Get all available GPU machines on the Hyperbolic platform with their specifications and pricing.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me available GPUs on Hyperbolic\",\n                filters: {}\n            } as GetAvailableGpusContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the available GPUs on the Hyperbolic platform:\\n\\nGPU Model: RTX 4090\\nMemory: 24GB\\nCompute Capability: 8.9\\nPricing: $2.5/hour ($1800/month)\\nLocation: US-East\\nStatus: ✓ Available\\nPerformance Score: 95/100\",\n                success: true,\n                data: {\n                    gpus: [{\n                        model: \"RTX 4090\",\n                        memory: 24,\n                        price: 2.5,\n                        available: 8,\n                        total: 8,\n                        location: \"US-East\"\n                    }]\n                }\n            } as GetAvailableGpusContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_HB_AVAILABLE_GPUS\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_HB_AVAILABLE_GPUS action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetAvailableGpusContent;\n            if (content.filters && typeof content.filters !== 'object') {\n                throw new ValidationError(\"Invalid filters format - must be an object\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_HB_AVAILABLE_GPUS action\");\n            // ------------------------------------------------------------------------------------------------\n            // Core GPU availability check logic\n            // ------------------------------------------------------------------------------------------------\n\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.HYPERBOLIC_API_KEY,\n                env: config.HYPERBOLIC_ENV\n            });\n\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            const content = message.content as GetAvailableGpusContent;\n            logGranular(\"Processing request with filters\", { filters: content.filters });\n\n            try {\n                logGranular(\"Making request to Hyperbolic marketplace API\");\n                const response = await axios.post(\n                    HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].marketplace,\n                    { filters: content.filters || {} },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from API\", {\n                    statusCode: response.status,\n                    dataLength: response.data?.instances?.length\n                });\n\n                // Process GPU information from response\n                const gpuMap = new Map<string, {\n                    model: string;\n                    memory: number;\n                    price: number;\n                    available: number;\n                    total: number;\n                    location: string;\n                    node_id: string;\n                    cluster_name: string;\n                    compute_power: number;\n                    clock_speed: number;\n                    storage_capacity: number;\n                    ram_capacity: number;\n                    cpu_cores: number;\n                    status: string;\n                }>();\n\n                for (const instance of response.data.instances) {\n                    if (instance.status === \"node_ready\") {\n                        const gpu = instance.hardware.gpus[0];\n                        const gpuModel = gpu.model.replace(\"NVIDIA-\", \"\");\n                        const memory = Math.round(gpu.ram / 1024); // Convert to GB\n                        const price = instance.pricing.price.amount / 100; // Convert to actual dollars\n                        const available = instance.gpus_total - instance.gpus_reserved;\n                        const total = instance.gpus_total;\n                        const location = instance.location.region;\n\n                        // Get additional hardware details\n                        const storage = instance.hardware.storage[0]?.capacity || 0;\n                        const ram = instance.hardware.ram[0]?.capacity || 0;\n                        const cpuCores = instance.hardware.cpus[0]?.virtual_cores || 0;\n\n                        // Create unique key based on model, price, and cluster\n                        const key = `${gpuModel}-${price}-${instance.cluster_name}`;\n\n                        if (!gpuMap.has(key)) {\n                            gpuMap.set(key, {\n                                model: gpuModel,\n                                memory,\n                                price,\n                                available,\n                                total,\n                                location,\n                                node_id: instance.id,\n                                cluster_name: instance.cluster_name,\n                                compute_power: gpu.compute_power || 0,\n                                clock_speed: gpu.clock_speed || 0,\n                                storage_capacity: storage,\n                                ram_capacity: ram,\n                                cpu_cores: cpuCores,\n                                status: instance.status\n                            });\n                        } else {\n                            const existing = gpuMap.get(key);\n                            if (existing) {\n                                existing.available += available;\n                                existing.total += total;\n                            }\n                        }\n                    }\n                }\n\n                const gpus = Array.from(gpuMap.values());\n\n                // Sort GPUs by price (descending) and availability\n                gpus.sort((a, b) => b.price - a.price || b.available - a.available);\n\n                // Format response text with more details\n                const formattedText = `Available GPU Types:\\n\\n${gpus\n                    .map(gpu => {\n                        const monthlyPrice = Math.round(gpu.price * 24 * 30);\n                        const storageGB = Math.round(gpu.storage_capacity / 1024);\n                        const ramGB = Math.round(gpu.ram_capacity / 1024);\n\n                        return `${gpu.model} (${gpu.memory}GB):\n- Price: $${gpu.price.toFixed(2)}/hour ($${monthlyPrice}/month)\n- Available: ${gpu.available}/${gpu.total} units\n- Location: ${gpu.location}\n- Node ID: ${gpu.node_id}\n- Cluster: ${gpu.cluster_name}\n- Hardware Specs:\n  • CPU: ${gpu.cpu_cores} virtual cores\n  • RAM: ${ramGB}GB\n  • Storage: ${storageGB}GB\n  • GPU Clock: ${gpu.clock_speed}MHz\n  • Compute Power: ${gpu.compute_power} TFLOPS\n- Status: ${gpu.status}\n\nTo rent this GPU, use:\n  • Node ID: ${gpu.node_id}\n  • Cluster Name: ${gpu.cluster_name}\n`;\n                    })\n                    .join(\"\\n\")}\n\n                Note: Use the Node ID and Cluster Name when creating an instance. These are the unique identifiers required for the rental process.`;\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            gpus: gpus\n                        }\n                    } as GetAvailableGpusContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch GPU data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch GPU data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting available GPUs: ${errorMessage}`,\n                    success: false,\n                    data: {\n                        gpus: [],\n                        error: errorMessage\n                    }\n                } as GetAvailableGpusContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_HB_AVAILABLE_GPUS action\");\n        }\n    }\n};\n\nexport default actionGetAvailableGpus;\n","export class HyperbolicError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'HyperbolicError';\n    Object.setPrototypeOf(this, HyperbolicError.prototype);\n  }\n}\n\nexport class ConfigurationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ConfigurationError';\n    Object.setPrototypeOf(this, ConfigurationError.prototype);\n  }\n}\n\nexport class APIError extends HyperbolicError {\n  constructor(message: string, public statusCode?: number) {\n    super(message);\n    this.name = 'APIError';\n    Object.setPrototypeOf(this, APIError.prototype);\n  }\n}\n\nexport class ValidationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n\nexport class SSHError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SSHError';\n    Object.setPrototypeOf(this, SSHError.prototype);\n  }\n}\n\nexport class GPUError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'GPUError';\n    Object.setPrototypeOf(this, GPUError.prototype);\n  }\n}\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { Decimal } from 'decimal.js';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[GetCurrentBalance] ${message}`, data);\n        console.log(`[GetCurrentBalance] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetCurrentBalanceContent extends Content {\n    text: string;\n    currency?: string;\n    success?: boolean;\n    data?: {\n        balances?: {\n            [key: string]: string;\n        };\n        error?: string;\n    };\n}\n\nexport const actionGetCurrentBalance: Action = {\n    name: \"GET_HB_CURRENT_BALANCE\",\n    similes: [\"CHECK_BALANCE\", \"SHOW_BALANCE\", \"VIEW_BALANCE\", \"BALANCE_CHECK\"],\n    description: \"Get the current balance of your Hyperbolic account in USD and crypto currencies.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show my current balance on Hyperbolic\"\n            } as GetCurrentBalanceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Your current balances are:\\nUSD: $1,000.00\\nETH: 0.5\\nBTC: 0.01\",\n                success: true,\n                data: {\n                    balances: {\n                        USD: \"1000.00\",\n                        ETH: \"0.5\",\n                        BTC: \"0.01\"\n                    }\n                }\n            } as GetCurrentBalanceContent\n        } as ActionExample\n    ], [\n        {\n            user: \"user\",\n            content: {\n                text: \"Get my ETH balance\",\n                currency: \"ETH\"\n            } as GetCurrentBalanceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Your ETH balance is: 0.5 ETH\",\n                success: true,\n                data: {\n                    balances: {\n                        ETH: \"0.5\"\n                    }\n                }\n            } as GetCurrentBalanceContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_CURRENT_BALANCE\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_CURRENT_BALANCE action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetCurrentBalanceContent;\n\n            if (content.currency && typeof content.currency !== 'string') {\n                throw new ValidationError(\"Currency must be a string\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_CURRENT_BALANCE action\");\n            // ------------------------------------------------------------------------------------------------\n            // Core balance check logic\n            // ------------------------------------------------------------------------------------------------\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.HYPERBOLIC_API_KEY,\n                env: config.HYPERBOLIC_ENV\n            });\n\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            const content = message.content as GetCurrentBalanceContent;\n            logGranular(\"Processing request\", { currency: content.currency });\n\n\n            try {\n                const response = await axios.get(\n                    HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].balance,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        },\n                        params: content.currency ? { currency: content.currency } : undefined\n                    }\n                );\n\n                logGranular(\"Received response from API\", {\n                    statusCode: response.status,\n                    dataLength: Object.keys(response.data).length\n                });\n\n                // Format balances using Decimal.js for precision\n                const balances: { [key: string]: string } = {};\n                for (const [key, value] of Object.entries(response.data)) {\n                    if (typeof value === 'number') {\n                        balances[key] = new Decimal(value).dividedBy(100).toFixed(2);\n                    }\n                }\n\n                // Format text response\n                const formattedText = Object.entries(balances)\n                    .map(([currency, amount]) => `${currency}: ${amount}`)\n                    .join('\\n');\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: `Your current balances are:\\n${formattedText}`,\n                        success: true,\n                        data: {\n                            balances\n                        }\n                    } as GetCurrentBalanceContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch balance data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch balance data\");\n            }\n            // ------------------------------------------------------------------------------------------------\n            // End core logic\n            // ------------------------------------------------------------------------------------------------\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting current balance: ${errorMessage}`,\n                    success: false,\n                    data: {\n                        error: errorMessage\n                    }\n                } as GetCurrentBalanceContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_CURRENT_BALANCE action\");\n        }\n    }\n};\n\nexport default actionGetCurrentBalance;\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[GetGpuStatus] ${message}`, data);\n        console.log(`[GetGpuStatus] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetGpuStatusContent extends Content {\n    text: string;\n    instanceId?: string;  // Make instanceId optional since we'll list all instances\n    success?: boolean;\n    data?: {\n        instances?: Array<{\n            id: string;\n            start: string;\n            sshCommand: string;\n            instance: {\n                status: string;\n                hardware: {\n                    gpus: Array<{\n                        model: string;\n                    }>;\n                };\n                pricing: {\n                    price: {\n                        amount: number;\n                    };\n                };\n            };\n        }>;\n        error?: string;\n    };\n}\n\nexport const actionGetGpuStatus: Action = {\n    name: \"GET_HB_GPU_STATUS\",\n    similes: [\"CHECK_GPU\", \"GPU_STATUS\", \"INSTANCE_STATUS\", \"CHECK_INSTANCE\", \"LIST_INSTANCES\"],\n    description: \"List all GPU instances or get detailed status information about a specific GPU instance.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Check status of all my GPU instances on Hyperbolic\",\n            } as GetGpuStatusContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"GPU Instance Status:\\nState: Running\\nUptime: 2.5 hours\\nGPU Utilization: 85%\\nMemory Usage: 75%\\nTemperature: 65°C\\nPower Usage: 250W\\n\\nRunning Processes:\\n- PyTorch Training (PID: 1234): 70% GPU, 8GB Memory\\n- TensorFlow Inference (PID: 5678): 15% GPU, 4GB Memory\",\n                instanceId: \"abc123\",\n                success: true,\n                data: {\n                    status: {\n                        state: \"running\",\n                        uptime: 9000,\n                        gpu_utilization: 85,\n                        memory_utilization: 75,\n                        temperature: 65,\n                        power_usage: 250,\n                        processes: [\n                            {\n                                pid: 1234,\n                                name: \"PyTorch Training\",\n                                memory_usage: 8192,\n                                gpu_usage: 70\n                            },\n                            {\n                                pid: 5678,\n                                name: \"TensorFlow Inference\",\n                                memory_usage: 4096,\n                                gpu_usage: 15\n                            }\n                        ]\n                    }\n                }\n            } as GetGpuStatusContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_HB_GPU_STATUS\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_HB_GPU_STATUS action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetGpuStatusContent;\n            // instanceId is optional now - if provided, it must be a string\n            if (content.instanceId && typeof content.instanceId !== 'string') {\n                throw new ValidationError(\"If provided, Instance ID must be a string\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_HB_GPU_STATUS action\");\n            // ------------------------------------------------------------------------------------------------\n            // Core GPU status check logic\n            // ------------------------------------------------------------------------------------------------\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.HYPERBOLIC_API_KEY,\n                env: config.HYPERBOLIC_ENV\n            });\n\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            const content = message.content as GetGpuStatusContent;\n            logGranular(\"Processing request\", { instanceId: content.instanceId });\n\n            try {\n                const response = await axios.get(\n                    HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].instances.base,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from API\", {\n                    statusCode: response.status\n                });\n\n                const instances = response.data.instances || [];\n                const formattedText = instances.length > 0\n                    ? `Your GPU Instances:\\n\\n${instances.map((instance: {\n                        id: string;\n                        instance: {\n                            status: string;\n                            hardware: {\n                                gpus: Array<{ model: string }>;\n                            };\n                            pricing: {\n                                price: { amount: number };\n                            };\n                        };\n                        sshCommand: string;\n                    }) =>\n                        `Instance ID: ${instance.id}\\n` +\n                        `Status: ${instance.instance.status}\\n` +\n                        `SSH Access: ${instance.sshCommand}\\n` +\n                        `GPU: ${instance.instance.hardware.gpus[0].model}\\n` +\n                        `Price: $${instance.instance.pricing.price.amount}/hour`\n                    ).join('\\n-------------------\\n\\n')}`\n                    : 'No active GPU instances found.';\n\n                logGranular(\"Sending success callback with formatted text\", { formattedText });\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            instances: response.data.instances\n                        }\n                    } as GetGpuStatusContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    if (error.response?.status === 404) {\n                        throw new APIError(\n                            `Instance ${content.instanceId} not found or GPU status is not available. Please verify the instance ID and try again.`,\n                            404\n                        );\n                    }\n                    throw new APIError(\n                        `Failed to fetch GPU status: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch GPU status\");\n            }\n            // ------------------------------------------------------------------------------------------------\n            // End core logic\n            // ------------------------------------------------------------------------------------------------\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting GPU status: ${errorMessage}`,\n                    instanceId: (message.content as GetGpuStatusContent).instanceId,\n                    success: false,\n                    data: {\n                        error: errorMessage\n                    }\n                } as GetGpuStatusContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_HB_GPU_STATUS action\");\n        }\n    }\n};\n\nexport default actionGetGpuStatus;\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { Decimal } from 'decimal.js';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[GetSpendHistory] ${message}`, data);\n        console.log(`[GetSpendHistory] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface SpendHistoryEntry {\n    timestamp: string;\n    amount: number;\n    currency: string;\n    description: string;\n    instanceId?: string;\n}\n\ninterface GetSpendHistoryContent extends Content {\n    text: string;\n    startDate?: string;\n    endDate?: string;\n    currency?: string;\n    success?: boolean;\n    data?: {\n        history?: SpendHistoryEntry[];\n        totalSpend?: number;\n        error?: string;\n    };\n}\n\nexport const actionGetSpendHistory: Action = {\n    name: \"GET_HB_SPEND_HISTORY\",\n    similes: [\"CHECK_SPENDING\", \"VIEW_EXPENSES\", \"SPENDING_HISTORY\", \"COST_HISTORY\"],\n    description: \"Get the spending history for your Hyperbolic account, optionally filtered by date range and currency.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show my spending history on Hyperbolic\"\n            } as GetSpendHistoryContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here's your spending history for the last 30 days:\\n\\nTotal Spend: $2,500\\n\\nBreakdown by Service:\\n- GPU Compute: $2,000 (80%)\\n- Storage: $300 (12%)\\n- Network: $200 (8%)\\n\\nTop Instances:\\n1. RTX 4090 Instance (gpu-123): $1,200\\n2. A100 Instance (gpu-456): $800\\n3. Storage Volume (vol-789): $300\",\n                success: true,\n                data: {\n                    totalSpend: 2500,\n                    breakdown: {\n                        compute: 2000,\n                        storage: 300,\n                        network: 200\n                    },\n                    topInstances: [\n                        {\n                            id: \"gpu-123\",\n                            name: \"RTX 4090 Instance\",\n                            spend: 1200\n                        },\n                        {\n                            id: \"gpu-456\",\n                            name: \"A100 Instance\",\n                            spend: 800\n                        },\n                        {\n                            id: \"vol-789\",\n                            name: \"Storage Volume\",\n                            spend: 300\n                        }\n                    ]\n                }\n            } as GetSpendHistoryContent\n        } as ActionExample\n    ], [\n        {\n            user: \"user\",\n            content: {\n                text: \"Get my spending for the last week\",\n                days: 7\n            } as GetSpendHistoryContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here's your spending history for the last 7 days:\\n\\nTotal Spend: $800\\n\\nBreakdown by Service:\\n- GPU Compute: $650 (81.25%)\\n- Storage: $100 (12.5%)\\n- Network: $50 (6.25%)\\n\\nTop Instances:\\n1. RTX 4090 Instance (gpu-123): $400\\n2. A100 Instance (gpu-456): $250\\n3. Storage Volume (vol-789): $100\",\n                success: true,\n                data: {\n                    totalSpend: 800,\n                    breakdown: {\n                        compute: 650,\n                        storage: 100,\n                        network: 50\n                    },\n                    topInstances: [\n                        {\n                            id: \"gpu-123\",\n                            name: \"RTX 4090 Instance\",\n                            spend: 400\n                        },\n                        {\n                            id: \"gpu-456\",\n                            name: \"A100 Instance\",\n                            spend: 250\n                        },\n                        {\n                            id: \"vol-789\",\n                            name: \"Storage Volume\",\n                            spend: 100\n                        }\n                    ]\n                }\n            } as GetSpendHistoryContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_HB_SPEND_HISTORY\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_HB_SPEND_HISTORY action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetSpendHistoryContent;\n\n            // Validate date formats if provided\n            if (content.startDate && !/^\\d{4}-\\d{2}-\\d{2}$/.test(content.startDate)) {\n                throw new ValidationError(\"Start date must be in YYYY-MM-DD format\");\n            }\n            if (content.endDate && !/^\\d{4}-\\d{2}-\\d{2}$/.test(content.endDate)) {\n                throw new ValidationError(\"End date must be in YYYY-MM-DD format\");\n            }\n\n            // Validate currency if provided\n            if (content.currency && typeof content.currency !== 'string') {\n                throw new ValidationError(\"Currency must be a string\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_HB_SPEND_HISTORY action\");\n            // ------------------------------------------------------------------------------------------------\n            // Core spend history logic\n            // ------------------------------------------------------------------------------------------------\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.HYPERBOLIC_API_KEY,\n                env: config.HYPERBOLIC_ENV\n            });\n\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            const content = message.content as GetSpendHistoryContent;\n            logGranular(\"Processing request\", {\n                startDate: content.startDate,\n                endDate: content.endDate,\n                currency: content.currency\n            });\n\n\n            try {\n                const response = await axios.get(\n                    HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].history,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        },\n                        params: {\n                            start_date: content.startDate,\n                            end_date: content.endDate,\n                            currency: content.currency\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from API\", {\n                    statusCode: response.status,\n                    dataLength: response.data.purchase_history?.length\n                });\n\n                const history = response.data.purchase_history || [];\n                const totalSpend = history.reduce((sum: number, entry: SpendHistoryEntry) =>\n                    sum + (entry.amount || 0), 0) / 100; // Convert to dollars\n\n                // Format date ranges for display\n                const dateRange = content.startDate && content.endDate\n                    ? ` (${content.startDate} - ${content.endDate})`\n                    : '';\n\n                // Format currency prefix/suffix\n                const currencyPrefix = content.currency ? `${content.currency} ` : '$';\n\n                // Format history entries\n                const historyText = history.length > 0 ? history\n                    .map((entry: SpendHistoryEntry, index: number) => {\n                        const date = new Date(entry.timestamp).toLocaleDateString('en-US', {\n                            year: 'numeric',\n                            month: 'short',\n                            day: '2-digit'\n                        });\n                        const amount = new Decimal(entry.amount).dividedBy(100).toFixed(2);\n                        return `${index + 1}. ${date}: ${currencyPrefix}${amount} - ${entry.description}`;\n                    })\n                    .join('\\n') : 'No purchase history available.';\n\n                const formattedText = `${content.currency || 'Spending'} History${dateRange}:\n\n${historyText}\n\n${history.length > 0 ? `Total Spend: ${currencyPrefix}${totalSpend.toFixed(2)}` : ''}`;\n            // ------------------------------------------------------------------------------------------------\n            // End core logic\n            // ------------------------------------------------------------------------------------------------\n\n                if (callback) {\n                    logGranular(\"Sending success callback\");\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            history,\n                            totalSpend\n                        }\n                    } as GetSpendHistoryContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch spend history: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch spend history\");\n            }\n\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting spend history: ${errorMessage}`,\n                    success: false,\n                    data: {\n                        error: errorMessage\n                    }\n                } as GetSpendHistoryContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_HB_SPEND_HISTORY action\");\n        }\n    }\n};\n\nexport default actionGetSpendHistory;\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseGpuRental } from '../utils/parseGpuRent';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[RentCompute] ${message}`, data);\n        console.log(`[RentCompute] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface RentComputeContent extends Content {\n    text: string;\n    success?: boolean;\n    data?: {\n        nodeId?: string;\n        clusterName?: string;\n        instanceId?: string;\n        cost?: {\n            amount: number;\n            currency: string;\n        };\n        specs?: {\n            gpu_model: string;\n            gpu_memory: number;\n            cpu_cores: number;\n            ram: number;\n            storage: number;\n        };\n        error?: string;\n    };\n}\n\nexport const actionRentCompute: Action = {\n    name: \"RENT_HB_COMPUTE\",\n    similes: [\"RENT_GPU\", \"GET_GPU\", \"LAUNCH_INSTANCE\", \"START_INSTANCE\"],\n    description: \"Rent GPU compute resources on the Hyperbolic platform using node ID and cluster name.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Rent GPU instance on the Hyperbolic \\n[nodeid]las1-prd-acl-msi-09.fen.intra[/nodeid]\\n[cluster]circular-snapdragon-worm[/cluster]\"\n            } as RentComputeContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Successfully rented GPU instance:\\n\" +\n                      \"Instance ID: i-rtx4090-xyz789\\n\" +\n                      \"Node: las1-prd-acl-msi-09.fen.intra\\n\" +\n                      \"Cluster: circular-snapdragon-worm\\n\" +\n                      \"Cost: $0.50/hour\\n\\n\" +\n                      \"Specifications:\\n\" +\n                      \"- GPU: NVIDIA RTX 4090\\n\" +\n                      \"- GPU Memory: 24GB\\n\" +\n                      \"- CPU Cores: 128\\n\" +\n                      \"- RAM: 1GB\\n\" +\n                      \"- Storage: 1GB\",\n                success: true,\n                data: {\n                    nodeId: \"las1-prd-acl-msi-09.fen.intra\",\n                    clusterName: \"circular-snapdragon-worm\",\n                    instanceId: \"i-rtx4090-xyz789\",\n                    cost: {\n                        amount: 0.50,\n                        currency: \"USD\"\n                    },\n                    specs: {\n                        gpu_model: \"NVIDIA RTX 4090\",\n                        gpu_memory: 24,\n                        cpu_cores: 128,\n                        ram: 1,\n                        storage: 1\n                    }\n                }\n            } as RentComputeContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"RENT_COMPUTE\") {\n            return true;\n        }\n\n        logGranular(\"Validating RENT_COMPUTE action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as RentComputeContent;\n\n            // Parse and validate the node ID and cluster name from the text\n            const rentalInfo = parseGpuRental(content.text);\n\n            logGranular(\"Validation successful\", rentalInfo);\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing RENT_COMPUTE action\");\n\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.HYPERBOLIC_API_KEY,\n                env: config.HYPERBOLIC_ENV\n            });\n\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            const content = message.content as RentComputeContent;\n            const rentalInfo = parseGpuRental(content.text);\n\n            logGranular(\"Processing request\", rentalInfo);\n\n            try {\n                // Ensure proper URL construction\n                const _baseUrl = HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].marketplace;\n                const endpoint = \"https://api.hyperbolic.xyz/v1/marketplace/instances/create\";\n\n                const requestBody = {\n                    cluster_name: rentalInfo.clusterName,\n                    node_name: rentalInfo.nodeId,\n                    gpu_count: 1\n                };\n\n                logGranular(\"Making API request:\", {\n                    endpoint,\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${apiKey.substring(0, 10)}...`\n                    },\n                    body: requestBody\n                });\n\n                const response = await axios.post(\n                    endpoint,\n                    requestBody,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`\n                        }\n                    }\n                );\n\n                logGranular(\"Received API response:\", {\n                    status: response.status,\n                    statusText: response.statusText,\n                    data: response.data\n                });\n\n                if (response.data.status === \"success\") {\n                    const formattedText = `Successfully requested GPU instance:\nNode: ${rentalInfo.nodeId}\nCluster: ${rentalInfo.clusterName}\nGPU Count: 1\n\nYour instance is being provisioned. You can check its status using the GET_GPU_STATUS command.`;\n\n                    if (callback) {\n                        callback({\n                            text: formattedText,\n                            success: true,\n                            data: {\n                                nodeId: rentalInfo.nodeId,\n                                clusterName: rentalInfo.clusterName\n                            }\n                        } as RentComputeContent);\n                    }\n\n                    return true;\n                }\n\n                throw new APIError(\"Unexpected response format from API\");\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to rent GPU: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to rent GPU\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error renting GPU: ${errorMessage}`,\n                    success: false,\n                    data: {\n                        error: errorMessage\n                    }\n                } as RentComputeContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute RENT_COMPUTE action\");\n        }\n    }\n};\n\nexport default actionRentCompute;\n","import { ValidationError } from '../error/base';\nimport { elizaLogger } from \"@elizaos/core\";\n\nexport interface ParsedGpuRental {\n    nodeId: string;\n    clusterName: string;\n}\n\n/**\n * Parses GPU rental information from [nodeid] and [cluster] tags\n * Format expected:\n * [nodeid]node-id-here[/nodeid]\n * [cluster]cluster-name-here[/cluster]\n *\n * @throws ValidationError if no valid node ID or cluster name is found\n */\nexport function parseGpuRental(text: string): ParsedGpuRental {\n    elizaLogger.info(\"[GpuRentalParser] Parsing text:\", { text });\n\n    try {\n        // Check for [nodeid] tag\n        const nodeMatch = text.match(/\\[nodeid\\]([\\s\\S]*?)\\[\\/nodeid\\]/i);\n        if (!nodeMatch) {\n            elizaLogger.info(\"[GpuRentalParser] No [nodeid] tags found in text\");\n            throw new ValidationError(\"No [nodeid] tags found. Expected format: [nodeid]node-id[/nodeid]\");\n        }\n\n        // Check for [cluster] tag\n        const clusterMatch = text.match(/\\[cluster\\]([\\s\\S]*?)\\[\\/cluster\\]/i);\n        if (!clusterMatch) {\n            elizaLogger.info(\"[GpuRentalParser] No [cluster] tags found in text\");\n            throw new ValidationError(\"No [cluster] tags found. Expected format: [cluster]cluster-name[/cluster]\");\n        }\n\n        const nodeId = nodeMatch[1].trim();\n        const clusterName = clusterMatch[1].trim();\n\n        if (!nodeId) {\n            elizaLogger.info(\"[GpuRentalParser] Empty node ID in [nodeid] tags\");\n            throw new ValidationError(\"Empty node ID in [nodeid] tags\");\n        }\n\n        if (!clusterName) {\n            elizaLogger.info(\"[GpuRentalParser] Empty cluster name in [cluster] tags\");\n            throw new ValidationError(\"Empty cluster name in [cluster] tags\");\n        }\n\n        elizaLogger.info(\"[GpuRentalParser] Successfully parsed rental info:\", { nodeId, clusterName });\n\n        return {\n            nodeId,\n            clusterName\n        };\n    } catch (error) {\n        elizaLogger.error(\"[GpuRentalParser] Parse error:\", { error });\n        if (error instanceof ValidationError) {\n            throw error;\n        }\n        throw new ValidationError(\n            `Failed to parse GPU rental info: ${error instanceof Error ? error.message : String(error)}`\n        );\n    }\n}\n\nexport default parseGpuRental;","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport axios from 'axios';\nimport { getConfig, validateHyperbolicConfig, HYPERBOLIC_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseGpuInstance } from '../utils/parseGpuInstance';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.HYPERBOLIC_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[TerminateCompute] ${message}`, data);\n        console.log(`[TerminateCompute] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface TerminateComputeContent extends Content {\n    text: string;\n    instanceId: string;\n    market?: string;\n    success?: boolean;\n    data?: {\n        terminationStatus?: {\n            status: string;\n            message: string;\n            error_code?: number;\n        };\n        error?: string;\n    };\n}\n\nexport const actionTerminateCompute: Action = {\n    name: \"TERMINATE_HB_COMPUTE\",\n    similes: [\"STOP_GPU\", \"TERMINATE_INSTANCE\", \"STOP_INSTANCE\"],\n    description: \"Terminate a running GPU compute instance on Hyperbolic\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Terminate GPU instance [gpu]worse-walnut-viper[/gpu] on Hyperbolic\",\n                instanceId: \"worse-walnut-viper\",\n                market: \"Hyperbolic\"\n            } as TerminateComputeContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Successfully initiated termination of GPU instance worse-walnut-viper on Hyperbolic\",\n                instanceId: \"worse-walnut-viper\",\n                market: \"Hyperbolic\",\n                success: true,\n                data: {\n                    terminationStatus: {\n                        status: \"success\",\n                        message: \"Termination initiated\"\n                    }\n                }\n            } as TerminateComputeContent\n        } as ActionExample\n    ], [\n        {\n            user: \"user\",\n            content: {\n                text: \"Terminate the Hyperbolic instance [gpu]worse-walnut-viper[/gpu]\",\n                instanceId: \"worse-walnut-viper\",\n                market: \"gpu\"\n            } as TerminateComputeContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Successfully initiated termination of GPU instance worse-walnut-viper on gpu marketplace\",\n                instanceId: \"worse-walnut-viper\",\n                market: \"gpu\",\n                success: true,\n                data: {\n                    terminationStatus: {\n                        status: \"success\",\n                        message: \"Termination initiated\"\n                    }\n                }\n            } as TerminateComputeContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        logGranular(\"Starting validation\", {\n            messageText: message.content?.text,\n            type: message.content?.type\n        });\n\n        // Check if this is our action type\n        if (!message.content?.type || message.content.type !== \"TERMINATE_HB_COMPUTE\") {\n            return true;\n        }\n\n        if (!message.content.text) {\n            throw new ValidationError(\"No text provided to parse instance ID\");\n        }\n\n        try {\n            // Just verify we can parse the instance ID\n            const parsed = parseGpuInstance(message.content.text);\n            logGranular(\"Successfully parsed instance ID\", {\n                instanceId: parsed.instanceId,\n                market: parsed.market\n            });\n            return true;\n        } catch (error) {\n            logGranular(\"Failed to parse instance ID\", { error });\n            throw new ValidationError(error instanceof Error ? error.message : \"Could not parse instance ID from text\");\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing TERMINATE_HB_COMPUTE action\");\n        try {\n            const config = await validateHyperbolicConfig(runtime);\n            const apiKey = config.HYPERBOLIC_API_KEY;\n            if (!apiKey) {\n                throw new ConfigurationError(\"HYPERBOLIC_API_KEY not found in environment variables\");\n            }\n\n            // Parse the instance ID directly from text\n            const parsed = parseGpuInstance(message.content?.text || \"\");\n            logGranular(\"Parsed instance details\", {\n                instanceId: parsed.instanceId,\n                market: parsed.market\n            });\n\n            try {\n                const requestBody = { id: parsed.instanceId };\n                logGranular(\"Sending termination request\", {\n                    endpoint: HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].instances.terminate,\n                    requestBody\n                });\n\n                const response = await axios.post(\n                    HYPERBOLIC_ENDPOINTS[config.HYPERBOLIC_ENV].instances.terminate,\n                    requestBody,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                const formattedText = `Successfully initiated termination of GPU instance ${parsed.instanceId}`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        instanceId: parsed.instanceId,\n                        market: parsed.market,\n                        success: true,\n                        data: {\n                            terminationStatus: {\n                                status: \"success\",\n                                message: \"Termination initiated\"\n                            }\n                        }\n                    } as TerminateComputeContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    const errorCode = error.response?.data?.error_code;\n                    const errorMessage = error.response?.data?.message || error.message;\n\n                    if (errorCode === 105) {\n                        throw new APIError(`Instance not found: ${parsed.instanceId}`, 404);\n                    }\n\n                    throw new APIError(\n                        `Failed to terminate instance: ${errorMessage}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to terminate instance\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error terminating instance: ${errorMessage}`,\n                    instanceId: (message.content as TerminateComputeContent).instanceId,\n                    success: false,\n                    data: {\n                        terminationStatus: {\n                            status: \"error\",\n                            message: errorMessage,\n                            error_code: (error as APIError).statusCode || 500\n                        }\n                    }\n                } as TerminateComputeContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute TERMINATE_HB_COMPUTE action\");\n        }\n    }\n};\n\nexport default actionTerminateCompute;\n","import { ValidationError } from '../error/base';\nimport { elizaLogger } from \"@elizaos/core\";\n\nexport interface ParsedGpuInstance {\n    instanceId: string;\n    market?: string;\n}\n\n/**\n * Parses a GPU instance ID from [gpu] tags\n * Format expected:\n * [gpu]instance-id[/gpu]\n *\n * @throws ValidationError if no valid instance ID is found\n */\nexport function parseGpuInstance(text: string): ParsedGpuInstance {\n    elizaLogger.info(\"[GpuParser] Parsing text:\", { text });\n\n    try {\n        // Only check for [gpu] tag format\n        const tagMatch = text.match(/\\[gpu\\]([\\s\\S]*?)\\[\\/gpu\\]/i);\n        if (!tagMatch) {\n            elizaLogger.info(\"[GpuParser] No [gpu] tags found in text\");\n            throw new ValidationError(\"No [gpu] tags found. Expected format: [gpu]instance-id[/gpu]\");\n        }\n\n        const instanceId = tagMatch[1].trim();\n        if (!instanceId) {\n            elizaLogger.info(\"[GpuParser] Empty instance ID in [gpu] tags\");\n            throw new ValidationError(\"Empty instance ID in [gpu] tags\");\n        }\n\n        elizaLogger.info(\"[GpuParser] Successfully parsed instance ID:\", { instanceId });\n\n        return {\n            instanceId,\n            market: \"gpu\"\n        };\n    } catch (error) {\n        elizaLogger.error(\"[GpuParser] Parse error:\", { error });\n        if (error instanceof ValidationError) {\n            throw error;\n        }\n        throw new ValidationError(\n            `Failed to parse GPU instance: ${error instanceof Error ? error.message : String(error)}`\n        );\n    }\n}\n\nexport default parseGpuInstance;"],"mappings":"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","names":["config","config","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","Decimal","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","elizaLogger","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","elizaLogger","config","GRANULAR_LOG","logGranular","elizaLogger","axios"]}